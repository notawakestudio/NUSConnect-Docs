(self.webpackChunknus_connect_docs=self.webpackChunknus_connect_docs||[]).push([[719],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2639:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={sidebar_position:4,title:"Workflow Guide"},l={unversionedId:"WorkflowGuide",id:"WorkflowGuide",isDocsHomePage:!1,title:"Workflow Guide",description:"Introduction",source:"@site/docs/WorkflowGuide.md",sourceDirName:".",slug:"/WorkflowGuide",permalink:"/NUSConnect-Docs/WorkflowGuide",editUrl:"https://github.com/notawakestudio/NUSConnect-Docs/blob/master/docs/WorkflowGuide.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Workflow Guide"},sidebar:"tutorialSidebar",previous:{title:"Developer Guide",permalink:"/NUSConnect-Docs/DeveloperGuide"},next:{title:"DevOps Guide",permalink:"/NUSConnect-Docs/DevOpsGuide"}},s=[{value:"<strong>Introduction</strong>",id:"introduction",children:[]},{value:"<strong>Project Management</strong>",id:"project-management",children:[{value:"Milestone",id:"milestone",children:[]},{value:"Weekly Sprint",id:"weekly-sprint",children:[]}]},{value:"<strong>Branching Workflow</strong>",id:"branching-workflow",children:[]},{value:"<strong>Issues</strong>",id:"issues",children:[]},{value:"<strong>Pull Requests (PR)</strong>",id:"pull-requests-pr",children:[]},{value:"<strong>Reviews</strong>",id:"reviews",children:[]},{value:"<strong>Unfinished Work</strong>",id:"unfinished-work",children:[]}],u={toc:s};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},(0,i.kt)("strong",{parentName:"h2"},"Introduction")),(0,i.kt)("p",null,"This Workflow Guide documents the team's agreed upon standardization of workflow\npractices to adhere to in the development of the project."),(0,i.kt)("h2",{id:"project-management"},(0,i.kt)("strong",{parentName:"h2"},"Project Management")),(0,i.kt)("p",null,"The team will follow a modified version of the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.scrumstudy.com/whyscrum/scrum-phases-and-processes"},"Scrum workflow"),".\nWe will have weekly meeting to plan for the goals for the upcoming weekly sprint\nand will draft them down in a github issue. Each developer will be responsible\nfor one feature/ user story and will check back in with the other developers as\nthey near completion. As the scrum workflow is suited to teams of 3-8 people.\nThe modified scrum workflow we will be following will not have daily meetings,\ninstead these will be replaced with daily reports through a messaging app. As\nthere are only 2 members in this development team, we will also not have a Scrum\nmaster."),(0,i.kt)("h3",{id:"milestone"},"Milestone"),(0,i.kt)("p",null,"Weekly milestones will be created to allow tagging of issues to a milestone and\nthe milestone will only be closed once all the issues have been resolved. The\nversioning of the milestone follows a standard of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Monthly increment of 1",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. First month V0, Second month V1 etc"))),(0,i.kt)("li",{parentName:"ul"},"Weekly increment of 0.1",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"E.g. First month First week V0.1, second week V0.2 etc")))),(0,i.kt)("h3",{id:"weekly-sprint"},"Weekly Sprint"),(0,i.kt)("p",null,"As mentioned above, we will create a Github issue to keep track of the tasks for\nthe sprint. A sample is given below:"),(0,i.kt)("p",null,"WK4 SPRINT"),(0,i.kt)("p",null,"Forum"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Create a post"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Reply to a post"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Add tags"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Connect to Database")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Quiz"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Update Creation logic"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Update UI")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Login"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Update Firebase logic")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Dashboard"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Minor UI fixes")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Test"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Integrate Cypress")),(0,i.kt)("h2",{id:"branching-workflow"},(0,i.kt)("strong",{parentName:"h2"},"Branching Workflow")),(0,i.kt)("p",null,"The team will adopt the\n",(0,i.kt)("a",{parentName:"p",href:"https://nus-cs2103-ay2021s2.github.io/website/se-book-adapted/chapters/revisionControl.html#feature-branch-flow"},"Feature branch workflow"),".\nIn general, before working ona new issue, an individual will first update their\nlocal master branch with the master branch of the remote repository. Then a\nfeature branch will be created and later on pushed to the remote repository for\nPR into the main branch. Typically, the command to do so would be as such (the\nsecond step is only necessary for the first time):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git checkout main\ngit remote add origin https://github.com/notawakestudio/nusGames.git\ngit fetch origin\ngit merge origin/main\ngit checkout -b featured-branch\ngit push\n")),(0,i.kt)("h2",{id:"issues"},(0,i.kt)("strong",{parentName:"h2"},"Issues")),(0,i.kt)("p",null,"Apart from listing user stories, issues will be used as the primary way to track\nin detail the tasks being worked on. When adding new issues, the following\nformat will be adhered to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Issues will be labelled with a type and priority (e.g. type.Task,\npriority.High)"),(0,i.kt)("li",{parentName:"ul"},"Issues will be tagged with a milestone"),(0,i.kt)("li",{parentName:"ul"},"Issues will be assigned with an assignee")),(0,i.kt)("h2",{id:"pull-requests-pr"},(0,i.kt)("strong",{parentName:"h2"},"Pull Requests (PR)")),(0,i.kt)("p",null,"For code that is ready to be merged, a pull request will be opened from the\nworking branch to the main branch of the remote repository. In addition, all\npull requests will have the following format:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PRs will be labelled with only a priority label (e.g. priority.High)"),(0,i.kt)("li",{parentName:"ul"},"PRs will be tagged with a milestone"),(0,i.kt)("li",{parentName:"ul"},"PRs will have no assignees which defaults to the author of the PR"),(0,i.kt)("li",{parentName:"ul"},"PRs will link clearly at the bottom of the PR message the issue it will\naddress (e.g. Closes #34)"),(0,i.kt)("li",{parentName:"ul"},"PRs will need to pass all CI checks and require approval of at least one\nreviewer before merging"),(0,i.kt)("li",{parentName:"ul"},"PRs will be merged by the PR author after an approval from a reviewer"),(0,i.kt)("li",{parentName:"ul"},"PRs may be merged by the reviewer if given the PR authors permission.")),(0,i.kt)("h2",{id:"reviews"},(0,i.kt)("strong",{parentName:"h2"},"Reviews")),(0,i.kt)("p",null,'Reviews may be done by any members of the team except for the PR author. An\napproval will be given only when the PR is deemed fully ready to be merged.\nReviewers may give comments on how to improve the code but not edit the PR\nauthors branch directly. We included a label called "JUST MERGE IT!!!" that can\nbe tagged to a PR by the PR author. Thus if the reviewer sees such label, he/she\ncan immediately merge the PR after approval. This is to reduce unnecessary wait\ntime.'),(0,i.kt)("h2",{id:"unfinished-work"},(0,i.kt)("strong",{parentName:"h2"},"Unfinished Work")),(0,i.kt)("p",null,"If there is any unfinished work/ work that needs to be improved upon, add the\nkeyword ",(0,i.kt)("inlineCode",{parentName:"p"},"//to-do")," behind it followed by a comment on the actions that need to be\npursued afterwards. An example is as follows:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"//to-do work on adding more Tests")),(0,i.kt)("p",null,"Optionally, the author may write their name behind to signal that they will be\ncontinuing work on this ",(0,i.kt)("inlineCode",{parentName:"p"},"//to-do")," so that other members do not write unnecessary\ncode. An example would be as follows:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"//to-do Jun Xiong work on adding more Tests")))}c.isMDXComponent=!0}}]);